import logging

from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from app.calendar import NewCalendar

from aiogram_calendar import SimpleCalendarCallback, SimpleCalendar

from app.database.requests import (
    create_user,
    create_car,
    get_all_user_cars,
    get_all_user_nots_per_year,
    delete_car_by_model,
    get_car_by_model,
    create_notes,
    create_reminder,
    get_user_notes,
    create_purchase,
    get_user_purchases,
    delete_note_by_title,
    delete_user_reminders_by_text,
    delete_user_purchases,
)

import app.keyboards as kb
import app.states as st


logger = logging.getLogger(__name__)

user = Router()


# ----- –û–ë–†–ê–ë–û–¢–ö–ê /start -----------
@user.message(CommandStart())
async def cmd_start(message: Message):
    await create_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n–£–∑–Ω–∞—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–º–æ—â—å—é /help\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ",
        reply_markup=kb.start_kb,
    )


# ----- RETURN_CALLBACK -----------
@user.callback_query(F.data == "return_callback")
async def return_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main_kb)
    
@user.callback_query(F.data == "ignore") # –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é—Ç
async def ignore_callback(callback_query: CallbackQuery):
    await callback_query.answer()


# ----- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û –í –ë–ê–ó–£ -----------
@user.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ê–≤—Ç–æ")
async def message_car_add(message: Message, state: FSMContext):
    await message.answer(
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ",
        reply_markup=kb.return_kb,
    )
    await state.set_state(st.CreateAutoFSM.brand)


@user.callback_query(F.data == "car_add_callback")
async def cq_car_add(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ",
        reply_markup=kb.return_kb,
    )
    await state.set_state(st.CreateAutoFSM.brand)


@user.message(st.CreateAutoFSM.brand)
async def create_auto_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text, id=message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ", reply_markup=kb.return_kb)
    await state.set_state(st.CreateAutoFSM.model)


@user.message(st.CreateAutoFSM.model)
async def create_auto_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ", reply_markup=kb.return_kb)
    await state.set_state(st.CreateAutoFSM.year)


@user.message(st.CreateAutoFSM.year)
async def create_auto_model(message: Message, state: FSMContext):
    text = message.text
    try:
        text = int(text)
        if text < 1885 or text > datetime.now().year:
            raise ValueError
        await state.update_data(year=text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è", reply_markup=kb.return_kb)
        await state.set_state(st.CreateAutoFSM.engine)
    except:
        await message.answer(
            "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
            reply_markup=kb.return_kb,
        )
        return


@user.message(st.CreateAutoFSM.engine)
async def create_auto_engine(message: Message, state: FSMContext):
    text = message.text
    try:
        text = float(text)
        if text < 0 or text > 20:
            raise ValueError
        await state.update_data(engine=message.text)
        await message.answer(
            "–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ –≤ –∫–∏–ª–ª–æ–º–µ—Ç—Ä–∞—Ö(—É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)",
            reply_markup=kb.return_kb,
        )
        await state.set_state(st.CreateAutoFSM.mileage)
    except:
        await message.answer(
            "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–í–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞, –∏–ª–∏ —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π –æ—Ç 0 –¥–æ 20",
            reply_markup=kb.return_kb,
        )
        return


@user.message(st.CreateAutoFSM.mileage)
async def create_auto_mileage(message: Message, state: FSMContext):
    text = message.text
    try:
        text = int(text)
        await state.update_data(mileage=message.text)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ? –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –Ω–∞–∂–∞–≤ /skip.",
            reply_markup=kb.return_kb,
        )
        await state.set_state(st.CreateAutoFSM.image)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!', reply_markup=kb.return_kb)


@user.message(F.text == "/skip")
async def skip_image(message: Message, state: FSMContext):
    await create_car(data=await state.get_data())
    await state.clear()
    await message.answer(
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!", reply_markup=kb.main_kb
    )


@user.message(st.CreateAutoFSM.image)
async def create_auto_image(message: Message, state: FSMContext):
    file_name = f"media/cars/{message.from_user.id}_{message.photo[-1].file_id}.jpg"

    await message.bot.download(file=message.photo[-1].file_id, destination=file_name)

    await state.update_data(image=file_name)

    await create_car(data=await state.get_data())
    await state.clear()
    await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=kb.main_kb)


# ----- –ú–ï–ù–Æ -----------
@user.message(Command('menu'))
async def menu_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
                         reply_markup=kb.main_kb)


@user.message(F.text == '–ú–µ–Ω—é')
async def menu_text_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
                         reply_markup=kb.main_kb)
    
@user.message(Command('help'))
async def help_cmd(message: Message):
    help_text = (
        "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîπ <b>/start</b> ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ <b>/menu</b> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîπ <b>/profile</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏\n"
        "üîπ <b>/settings</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "üîπ <b>/help</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:</b>\n"
        "üî∏ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å ‚Äî <code>–î–æ–±–∞–≤–∏—Ç—å –ê–≤—Ç–æ</code>\n"
        "üî∏ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å ‚Äî <code>–£–¥–∞–ª–∏—Ç—å –ê–≤—Ç–æ</code>\n"
        "üî∏ –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö ‚Äî <code>–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö</code>\n\n"
        "<b>üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        "üîî –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî <code>–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</code>\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî <code>–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</code>\n\n"
        "<b>üõç –ü–æ–∫—É–ø–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:</b>\n"
        "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚Äî <code>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</code>\n"
        "üìú –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã ‚Äî <code>–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã</code>\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º! üòä ‚Äî <b>/bug</b>"
    )
    await message.answer(help_text, parse_mode="HTML")

@user.message(Command('bug'))
async def cmd_bug(message: Message):
    await message.answer('Coming soon...')


# ----- –ü–†–û–§–ò–õ–¨ -----------
@user.message(F.text == "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏") # –û—Ç–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
async def profile_text_cmd(message: Message):
    await profile_cmd_def(message=message)
@user.message(Command('profile')) # –æ—Ç–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã
async def profile_cmd(message: Message):
    await profile_cmd_def(message=message)
    

async def profile_cmd_def(message): # –æ–±—â–≤—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–≤–æ–≤
    cars = await get_all_user_cars(message.from_user.id)
    expenses = await get_all_user_nots_per_year(message.from_user.id)
    cars_text = "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:\n"
    
    if cars:
        for car in cars:
            brand = car["brand"]
            model = car["model"]
            year = car["year"]

            car_info = f"- {brand} {model} | –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}\n"
            cars_text += car_info
    else:
        cars_text = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n"

    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}\n\n{cars_text}\n–¢—Ä–∞—Ç—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞ –≥–æ–¥: {expenses}",
        reply_markup=await kb.profile_kb(message.from_user.id),
    )
    

@user.callback_query(F.data.startswith("car_"))
async def settings_car_callback(callback: CallbackQuery):
    data = callback.data.split("_")
    text = f'{data[1]} {data[2]}'
    print(text)
    cars = await get_car_by_model(callback.from_user.id, text)
    await callback.message.delete()
    
    if cars:
        for car in cars:
            car_info = (
                f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car['brand']} {car['model']}:\n\n"
                f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å - {car['brand']}\n"
                f"–ú–æ–¥–µ–ª—å - {car['model']}\n"
                f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ - {car['year']}\n"
                f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è - {car['engine']}\n"
                f"–ü—Ä–æ–±–µ–≥ - {car['mileage']}–∫–º"
            )

            image = car.get("image", None)

            if image:
                try:
                    logger.info(f"{image}")
                    await callback.message.answer_photo(
                        photo=FSInputFile(image, filename="Car"), caption=car_info, reply_markup=kb.main_kb
                    )
                except FileNotFoundError:
                    await callback.message.answer(
                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {car['brand']} {car['model']}", reply_markup=kb.main_kb
                    )
            else:
                await callback.message.answer(car_info, reply_markup=kb.main_kb)
    else:
        await callback.message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞–≤—Ç–æ.", reply_markup=kb.main_kb)
    
@user.callback_query(F.data == 'list_purchases')
async def purchase_list_callback(callback: CallbackQuery):
    message_note = await get_user_notes(tg_id=callback.from_user.id)
    await callback.message.answer(f'–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:\n{message_note}', reply_markup=kb.main_kb)
    
    
# ----- –ù–ê–°–¢–†–û–ô–ö–ò -----------
@user.message(Command('settings'))
async def settings_cmd(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.settings_kb)


@user.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ê–≤—Ç–æ")
async def delete_car_cmd(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n–í–Ω–∏–º–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ù–ï–õ–¨–ó–Ø!!!",
        reply_markup=await kb.all_cars_kb(message.from_user.id),
    )
    await state.set_state(st.CarDeleteFSM.car)


@user.message(st.CarDeleteFSM.car)
async def delete_car_fsm(message: Message, state: FSMContext):
    success = await delete_car_by_model(message.from_user.id, message.text)
    if success:
        await message.answer("–ê–≤—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("–ê–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=kb.main_kb)


# ----- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò -----------
@user.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
async def notes_tittle_add(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(st.CreateNotesFSM.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–≤—Ç–æ:",
                         reply_markup=kb.return_kb)


@user.message(st.CreateNotesFSM.title)
async def notes_add_coast(message: Message, state: FSMContext):
    await state.update_data(id=message.from_user.id, title=message.text)
    await state.set_state(st.CreateNotesFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤ –≤–∞—à–µ–π –≤–∞–ª—é—Ç–µ, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
                         reply_markup=kb.return_kb)


@user.message(st.CreateNotesFSM.price)
async def notes_add_final(message: Message, state: FSMContext):
    try:
        await state.update_data(price=int(message.text))
    except ValueError:
        await message.answer("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: ",
                             reply_markup=kb.return_kb)
        return
    data = await state.get_data()
    await create_notes(data=data)
    await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ –æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ {data.get('title')} —Å–æ–∑–¥–∞–Ω–∞.",
                         reply_markup=kb.main_kb)
    await state.clear()
    
    
@user.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
async def cmd_del_note(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup= await 
                         kb.delete_user_notes_kb(message.from_user.id))
    
    
@user.callback_query(F.data.startswith("note_"))
async def notes_delete_callback(callback_query: CallbackQuery,):
    await callback_query.message.answer('–£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É...')
    data = callback_query.data.split("_")[1]
    try:
        await delete_note_by_title(callback_query.from_user.id, data)
        await callback_query.message.delete()
        await callback_query.message.answer(f'–£–¥–∞–ª–∏–ª–∏ –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞—Ç–µ –Ω–∞: {data}', reply_markup= kb.main_kb)
    except:
        await callback_query.message.delete()
        await callback_query.message.answer('–£–¥–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ /start', reply_markup=kb.settings_kb)
    

# ------ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø -------------
@user.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def start_add_reminder(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1 –¥–æ 365 –¥–Ω–µ–π:",
        reply_markup=await NewCalendar().start_calendar(),

    )

@user.callback_query(SimpleCalendarCallback.filter())
async def choose_total_date_reminder(
        callback_query: CallbackQuery,
        callback_data: SimpleCalendarCallback,
        state: FSMContext,
):
    await state.clear()

    calendar = NewCalendar()
    calendar.show_alerts = True

    early_date = datetime.now() + timedelta(days=1)  # —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞)
    late_date = datetime.now() + timedelta(days=365)  # –ø–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞ (—á–µ—Ä–µ–∑ –≥–æ–¥)

    calendar.set_dates_range(early_date, late_date)
    selected, date = await calendar.process_selection(callback_query, callback_data)

    if selected:
        await state.set_state(st.CreateRemindersFSM.text)
        await state.update_data(
            total_date=date, id=callback_query.from_user.id, created_at=datetime.now()
        )
        await callback_query.answer (f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ {date.strftime("%d.%m.%Y")}')
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ")

@user.message(st.CreateRemindersFSM.text)
async def add_text_and_final_reminder(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await create_reminder(data)
    text = data.get('text')
    await message.answer(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ {text} –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    await state.clear()

@user.message(F.text == '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def delete_reminder_cmd(message: Message):
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=await kb.delete_user_reminders_kb(tg_id=message.from_user.id))
    
@user.callback_query(F.data.startswith("reminder_"))
async def delete_reminder_with_callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–£–¥–∞–ª—è–µ–º...')
    data = callback.data.split("_")[1]
    try:
        await delete_user_reminders_by_text(user_id=callback.from_user.id,data=data)
        await callback.message.delete()
        await callback.message.answer('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "{data}" –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    except Exception as e:
        await callback.message.delete()
        await callback.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {e}')
    
# ------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–°–ù–´–• –ü–û–ö–£–ü–û–ö -------------
@user.message(F.text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def purchases_cmd(message: Message, state: FSMContext):
    await message.answer(
        '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –±—É–¥—É—â–µ–º –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã –ø–æ–∫—É–ø–∞–ª–∏', reply_markup=kb.favorites_kb)
    
    
@user.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def purchases_cmd(message: Message, state: FSMContext):
    await state.set_state(st.CreatePurchasesFSM.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Å—ë –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ ( —Ü–µ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ ):",
                         reply_markup=kb.skip_kb)


@user.message(st.CreatePurchasesFSM.text)
async def purchases_add_text(message: Message, state: FSMContext):
    if message.text == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —à–∞–≥!", reply_markup=kb.main_kb)
        await state.update_data(id=message.from_user.id, text=None)
    else:
        await state.update_data(id=message.from_user.id, text=message.text)
    await state.set_state(st.CreatePurchasesFSM.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
                         reply_markup=kb.skip_kb)


@user.message(st.CreatePurchasesFSM.price)
async def purchases_add_price(message: Message, state: FSMContext):
    if message.text == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —à–∞–≥!", reply_markup=kb.main_kb)
        await state.update_data(price=None)
    else:
        try:
            await state.update_data(price=int(message.text))
        except ValueError:
            await message.answer(
                "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥( —Ü–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–ª–Ω–æ–≥–æ —á–∏—Å–ª–∞ ): ",
                reply_markup=kb.skip_kb)
            return
    await state.set_state(st.CreatePurchasesFSM.image)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
                         reply_markup=kb.skip_kb)


@user.message(st.CreatePurchasesFSM.image)
async def purchases_add_image(message: Message, state: FSMContext):
    if message.text == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —à–∞–≥!", reply_markup=kb.main_kb)
        await create_purchase(data=await state.get_data())
    else:
        file_name = f"media/purchases/{message.from_user.id}_{message.photo[-1].file_id}.jpg"
        await message.bot.download(file=message.photo[-1].file_id, destination=file_name)
        await state.update_data(image=file_name)
        await create_purchase(data=await state.get_data())
    await state.clear()
    await message.answer("–ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=kb.main_kb)

# ------ –í—ã–≤–æ–¥ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ -------------
@user.message(F.text == "–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã") # –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é
async def purchases_cmd(message: Message, state: FSMContext):
    purchases = await get_user_purchases(message.from_user.id)
    if not purchases:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.", reply_markup=kb.favorites_kb)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –ø–æ–∫—É–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_purchase=0)
    await message.answer('–í—ã–≤–æ–¥–∏–º...', reply_markup=kb.skip_menu_kb)
    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
    await show_purchase(message, purchases[0], 0, len(purchases))
    
    
async def show_purchase(message: Message, purchase, current_index, total_count): # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
    text = (
    f"–ü–æ–∫—É–ø–∫–∞: {purchase.text}\n"
    f"–¶–µ–Ω–∞: {purchase.price:.2f} ‚ÇΩ\n\n")
    
    await message.delete()
    if purchase.image:
        try:
            await message.answer_photo(photo=FSInputFile(purchase.image, filename="Car"), caption=text, reply_markup=await kb.get_pagination_keyboard(current_index, total_count, purchase.text))
        except Exception as e:
            await message.answer(f"–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}\n –≤–æ–∑–º–æ–∂–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?")
    else:
        await message.answer(
            text, 
            reply_markup=await kb.get_pagination_keyboard(current_index, total_count, purchase.text)
        )
    
@user.callback_query(F.data.startswith("prev_") | F.data.startswith("next_"))
async def pagination_handler(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data.split("_")
    direction = data[0]
    current_index = int(data[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = callback_query.from_user
    purchases = await get_user_purchases(user.id)
    
    if direction == "prev":
        new_index = current_index - 1
    else:
        new_index = current_index + 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_purchase=new_index)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É
    await show_purchase(callback_query.message, purchases[new_index], new_index, len(purchases))
    
    # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()
    
@user.callback_query(F.data.startswith("delete_"))
async def confirm_callback(callback_query: CallbackQuery):
    await callback_query.message.delete()
    data = callback_query.data.split("_")
    text = data[1]
    index = int(data[2])
    index -= 1
    await callback_query.message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É: {text}', reply_markup= await kb.confirmation_delete_kb(text, index))
    
@user.callback_query(F.data.startswith('del_'))
async def delete_callback(callback: CallbackQuery):
    data = callback.data.split("_")
    text = data[1]
    await callback.message.delete()
    await delete_user_purchases(user_id=callback.from_user.id, text=text)
    await callback.message.answer('–£–¥–∞–ª—ë–Ω–æ.', reply_markup = kb.main_kb)